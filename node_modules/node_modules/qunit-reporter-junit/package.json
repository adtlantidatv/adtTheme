{
  "name": "qunit-reporter-junit",
  "title": "JUnit reporter for QUnit",
  "description": "Produce JUnit-style XML test reports with QUnit.",
  "version": "1.0.1",
  "author": {
    "name": "jQuery Foundation and other contributors",
    "url": "https://github.com/jquery/qunit-reporter-junit/blob/master/AUTHORS.txt"
  },
  "homepage": "https://github.com/jquery/qunit-reporter-junit",
  "repository": {
    "type": "git",
    "url": "git://github.com/jquery/qunit-reporter-junit.git"
  },
  "bugs": {
    "url": "https://github.com/jquery/qunit-reporter-junit/issues"
  },
  "license": {
    "name": "MIT",
    "url": "http://www.opensource.org/licenses/mit-license.php"
  },
  "keywords": [
    "qunit",
    "qunit-plugin",
    "qunit-reporter",
    "junit"
  ],
  "main": "qunit-reporter-junit.js",
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-connect": "~0.2.0",
    "grunt-contrib-jshint": "~0.2.0",
    "grunt-git-authors": "~1.1.0",
    "grunt-lib-phantomjs": "~0.2.0",
    "qunitjs": "1.x"
  },
  "_id": "qunit-reporter-junit@1.0.1",
  "dist": {
    "shasum": "344255d95833021d144fafee0f4273a26589975f",
    "tarball": "http://registry.npmjs.org/qunit-reporter-junit/-/qunit-reporter-junit-1.0.1.tgz"
  },
  "_from": "qunit-reporter-junit@*",
  "_npmVersion": "1.2.14",
  "_npmUser": {
    "name": "krinkle",
    "email": "krinklemail@gmail.com"
  },
  "maintainers": [
    {
      "name": "krinkle",
      "email": "krinklemail@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "7135789b6d1683ec532f29ddcfd547546b6364c5",
  "_resolved": "https://registry.npmjs.org/qunit-reporter-junit/-/qunit-reporter-junit-1.0.1.tgz",
  "readme": "[![Build Status](https://travis-ci.org/jquery/qunit-reporter-junit.png)](https://travis-ci.org/jquery/qunit-reporter-junit)\n\n# JUnit reporter for QUnit\n\nA QUnit plugin that produces JUnit-style XML test reports (e.g. for integration into build tools like Jenkins).\n\n## Usage\n\nInclude the plugin script after QUnit itself, then implement the `jUnitReport` hook to do something with the XML string (e.g. upload it to a server):\n\n```js\nQUnit.jUnitReport = function(report) {\n\tconsole.log(report.xml);\n};\n```\n\n## Notes\n\nIf you're using Grunt, you should take a look [grunt-contrib-qunit](https://github.com/gruntjs/grunt-contrib-qunit).\n",
  "readmeFilename": "README.md"
}
