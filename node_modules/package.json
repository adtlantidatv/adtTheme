{
  "name": "kws-media-api",
  "version": "4.3.17",
  "description": "Media API for the Kurento Web SDK",
  "homepage": "http://www.kurento.com",
  "license": "LGPL",
  "author": {
    "name": "Kurento",
    "email": "info@kurento.com",
    "url": "http://kurento.org"
  },
  "contributors": [
    {
      "name": "Jesús Leganés Combarro 'piranna'",
      "email": "piranna@gmail.com",
      "url": "http://pirannafs.blogspot.com.es"
    }
  ],
  "main": "lib/KwsMedia.js",
  "scripts": {
    "test": "qunit-cli -c KwsMedia:. -c node_modules/qunit-reporter-junit -c wock:node_modules/wock -c test/_common.js -c test/_proxy.js test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Kurento/kws-media-api.git"
  },
  "bugs": {
    "url": "https://github.com/Kurento/kws-media-api/issues",
    "email": "info@kurento.com"
  },
  "keywords": [
    "API",
    "Kurento",
    "KWS",
    "media",
    "SDK",
    "web",
    "WebRTC"
  ],
  "dependencies": {
    "async": "~0.9.0",
    "es6-promise": "1.0.0",
    "extend": "~1.2.1",
    "inherits": "~2.0.1",
    "kws-rpc-builder": "4.3.17",
    "ws": "~0.4.31"
  },
  "devDependencies": {
    "bower": "~1.3.5",
    "grunt": "~0.4.5",
    "grunt-browserify": "^2.1.2",
    "grunt-cli": "~0.1.13",
    "grunt-contrib-clean": "^0.5.0",
    "grunt-contrib-qunit": "^0.5.1",
    "grunt-curl": "^2.0.2",
    "grunt-jsdoc": "^0.5.6",
    "grunt-npm2bower-sync": "^0.4.0",
    "grunt-shell": "^0.7.0",
    "minifyify": "~3.0.9",
    "qunit-cli": "git://github.com/ShareIt-project/qunit-cli",
    "qunit-reporter-junit": "^1.0.1",
    "qunitjs": "~1.14.0",
    "wock": "^0.1.1"
  },
  "readme": "[![][KurentoImage]][website]\n\nCopyright © 2014 Kurento. Licensed under [LGPL License].\n\nKWS Media API for Node.js and browsers\n=============\nMedia API for Kurento Web SDK\n\nThe KWS Media API project contains the implementation of the Kurento client\nside Media API for web applications and Node.js.\n\nThe source code of this project can be cloned from the [GitHub repository].\n\nInstallation instructions\n-------------------------\n\nBe sure to have installed the Node.js tools in your system. It's heavily\nencouraged to use the latest Node.js and NPM versions from the\n[Node.js project PPA] instead of the packages available on the oficial Ubuntu\nrepositories, since due to the fast-moving Node.js community and environment\nthese last ones get easily outdated and can lead to incompatibility errors:\n\n```bash\nsudo add-apt-repository ppa:chris-lea/node.js\nsudo apt-get update\n\nsudo apt-get install nodejs nodejs-legacy\n```\n\nTo install the library, it's recomended to do that from the [NPM repository] :\n\n```bash\nnpm install kws-media-api\n```\n\nAlternatively, you can download the code using git and install manually its\ndependencies:\n\n```bash\ngit clone https://github.com/Kurento/kws-media-api.git\ncd kws-media-api\nnpm install\n```\n\nNeed to know, currently the library can't be able to talk directly with the\nKurento Media Server, so it require to use a [Kurento Media Connector] instace.\nYou can download the latest release from http://ci.kurento.com/apps/kmf-media-connector.zip.\nWhen you decompress it you'll find a README file with installation instructions.\n\n### Browser\n\nTo build the browser version of the library you'll only need to exec the [grunt]\ntask runner and they will be generated on the ```dist``` folder. Alternatively,\nif you don't have it globally installed, you can run a local copy by executing\n\n```bash\nnode_modules/.bin/grunt\n```\n\n\nHow to test\n-----------\nTests are autonomous and based on [QUnit] testing framework. Their only\nrequirement is to exec previously ```npm install``` to have installed all the\ndev dependencies.\n\n### Browser\n\nAfter building the web browser version of the library, just open the file\n```test/index.html``` with any browser, and the tests will launch automatically.\nIn case of the browser raise some security policy errors, you can host the tests\ncode by running any static web server at the source code root folder, for\nexample by launching the command\n\n```bash\npython -m SimpleHTTPServer 8000\n```\n\nYou can be able to configure to what WebSocket endpoint you want to connect on\nthe dropdown list at the top of the tests page.\n\n### Node.js\n\nTo exec test in Node.js, you only need to exec ```npm test```, that will launch\nall the tests automatically using [QUnit-cli].\n\nAt this moment, the default WebSocket endpoint can not be changed due to limits\nof the current implementation of NPM. If you need to use a different WebSocket\nendpoint from the default one, you can exec the underlying test command and\nappend a *ws_uri* parameter pointing the the alternative WebSocket endpoint:\n\n```bash\nnode_modules/.bin/qunit-cli -c KwsMedia:. -c wock:node_modules/wock -c test/_common.js -c test/_proxy.js test/*.js --ws_uri=ws://localhost:8080\n```\n\n\nHow to create a basic pipeline\n------------------------------\n\nFor tutorial purposes, we are going to create a basic pipeline that play a video\nfile from its URL and stream it over HTTP. You can also download and check this\n[example full source code] or run it directly from [JsFiddle] :\n\n1. Create an instance of the KwsMedia class that will manage the connection with\n   the Kurento Media Server, so you'll need to provide the URI of its WebSocket\n   endpoint. Alternatively, instead of using a constructor, you can also provide\n   success and error callbacks:\n\n   ```Javascript\n   var kwsMedia = kwsMediaApi.KwsMedia(ws_uri);\n   \n   kwsMedia.then(function(kwsMedia)\n   {\n     // Connection success\n     …\n   },\n   function(error)\n   {\n     // Connection error\n     …\n   });\n   ```\n\n   ```Javascript\n   kwsMediaApi.KwsMedia(ws_uri, function(kwsMedia)\n   {\n     // Connection success\n     …\n   },\n   function(error)\n   {\n     // Connection error\n     …\n   });\n   ```\n\n2. Create a pipeline. This will host and connect the diferent elements. In case\n   of error, it will be notified on the ```error``` parameter of the callback,\n   otherwise this will be null as it's common on Node.js style APIs:\n\n   ```Javascript\n   kwsMedia.create('MediaPipeline', function(error, pipeline)\n   {\n     …\n   });\n   ```\n\n3. Create the elements. The player need an object with the URL of the video, and\n   we'll also subscribe to the 'EndOfStream' event of the HTTP stream:\n\n   ```Javascript\n   pipeline.create('PlayerEndpoint',\n   {uri: \"https://ci.kurento.com/video/small.webm\"},\n   function(error, player)\n   {\n     …\n   });\n\n   pipeline.create('HttpGetEndpoint', function(error, httpGet)\n   {\n     httpGet.on('EndOfStream', function(event)\n     {\n       …\n     });\n\n     …\n   });\n   ```\n\n4. Connect the elements, so the media stream can flow between them:\n\n   ```Javascript\n   player.connect(httpGet, function(error, pipeline)\n   {\n     …\n   });\n   ```\n\n5. Get the URL where the media stream will be available:\n\n   ```Javascript\n   httpGet.getUrl(function(error, url)\n   {\n     …\n   });\n   ```\n\n6. Start the reproduction of the media:\n\n   ```Javascript\n   player.play(function(error)\n   {\n     …\n   });\n   ```\n\n\nKurento\n=======\n\nWhat is Kurento\n---------------\nKurento provides an open platform for video processing and streaming based on\nstandards.\n\nThis platform has several APIs and components which provide solutions to the\nrequirements of multimedia content application developers. These include:\n\n* Kurento Media Server (KMS). A full featured media server providing the\ncapability to create and manage dynamic multimedia pipelines.\n* Kurento Media Framework (KMF). A Java server-side API providing the required\nabstractions for creating applications that manage multimedia content, calls\nand conferences involving audio, video and data information.\n* Kurento Web SDK (KWS). A client-side HTML5 and Javascript SDK for accessing\nKMF capabilities\n* Kurento Android SDK (KAS). A Java and native SDK allowing easy integration of\nKMF into any kind of Android application.\n\nDownloads\n---------\nTo download binary releases of Kurento components visit http://kurento.org\n\nCode for other Kurento projects can be found in the [GitHub Kurento group].\n\nNews and Website\n----------------\nInformation about Kurento can be found on our [website].\nFollow us on Twitter @[kurentoms].\n\n[example full source code]: https://github.com/Kurento/kws-media-api/tree/develop/example/PlayerEndpoint-HttpGetEndpoint\n[GitHub Kurento group]: https://github.com/kurento\n[GitHub repository]: https://github.com/kurento/kws-media-api\n[grunt]: http://gruntjs.com/\n[JsFiddle]: http://jsfiddle.net/gh/get/library/pure/kurento/kws-media-api/contents/example/PlayerEndpoint-HttpGetEndpoint\n[Kurento Media Connector]: https://github.com/Kurento/kmf-media-connector\n[KurentoImage]: https://secure.gravatar.com/avatar/21a2a12c56b2a91c8918d5779f1778bf?s=120\n[kurentoms]: http://twitter.com/kurentoms\n[LGPL License]: http://www.gnu.org/licenses/lgpl-2.1.html\n[Node.js project PPA]: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager#ubuntu-mint-elementary-os\n[NPM repository]: https://www.npmjs.org/package/kws-media-api\n[QUnit]: http://qunitjs.com\n[QUnit-cli]: https://github.com/devongovett/qunit-cli\n[website]: http://kurento.org\n",
  "readmeFilename": "README.md",
  "_id": "kws-media-api@4.3.17",
  "_from": "kws-media-api@"
}
